// Generated by CoffeeScript 1.6.3
(function() {
  var BiggerPicture,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BiggerPicture = BiggerPicture || {};

  BiggerPicture.App = (function() {
    function App() {
      var container, containers, image_el, images, _i, _len;
      containers = $(".bpImageTop, .bpBoth");
      images = [];
      for (_i = 0, _len = containers.length; _i < _len; _i++) {
        container = containers[_i];
        container = $(container);
        image_el = container.find("img").first();
        images.push({
          image_el: image_el,
          src: image_el.attr('src'),
          caption: container.find(".bpCaption").remove("a, div").text()
        });
      }
      new BiggerPicture.Gallery(images);
    }

    return App;

  })();

  setTimeout(function() {
    return new BiggerPicture.App();
  });

  0;

  BiggerPicture = BiggerPicture || {};

  BiggerPicture.Gallery = (function() {
    Gallery.prototype.slides = [];

    Gallery.prototype.current_index = 0;

    Gallery.prototype.container = $("<div />", {
      "class": "bigger-picture"
    });

    Gallery.prototype.overlay = $("<div />", {
      "class": "bigger-picture-overlay"
    });

    Gallery.prototype.ul = $("<ul />", {
      "class": "bigger-picture-list"
    });

    function Gallery(images) {
      var image, _i, _len;
      for (_i = 0, _len = images.length; _i < _len; _i++) {
        image = images[_i];
        this.set_up_image(image);
      }
      this.container.append(this.overlay, this.ul);
      $("body").append(this.container);
      this.set_up_listeners();
      this.show_current();
    }

    Gallery.prototype.set_up_image = function(image) {
      var list_image;
      list_image = $("<li >").hide();
      this.slides.push(new BiggerPicture.Slide(image, list_image));
      return this.ul.append(list_image);
    };

    Gallery.prototype.show_current = function() {
      return this.slides[this.current_index].show_slide();
    };

    Gallery.prototype.hide_current = function() {
      return this.slides[this.current_index].hide_slide();
    };

    Gallery.prototype.set_up_listeners = function() {
      var _this = this;
      return $("body").on("keydown", function(evt) {
        return _this.test_keypress(evt);
      });
    };

    Gallery.prototype.test_keypress = function(evt) {
      var kc, to;
      kc = evt.keyCode;
      to = -9999;
      if ((kc === 39 || kc === 40)) {
        to = this.current_index < this.slides.length - 1 ? this.current_index + 1 : 0;
      } else if ((kc === 37 || kc === 38)) {
        to = this.current_index > 0 ? this.current_index - 1 : this.slides.length - 1;
      }
      if (to >= 0) {
        evt.preventDefault();
        this.hide_current();
        this.current_index = to;
        return this.show_current();
      }
    };

    return Gallery;

  })();

  BiggerPicture = BiggerPicture || {};

  BiggerPicture.Slide = (function() {
    function Slide(image, element) {
      this.image = image;
      this.element = element;
      this.image_loaded = __bind(this.image_loaded, this);
      this.img = new Image();
      this.img.addEventListener("load", this.image_loaded);
      this.img.src = this.image.src;
      this.element.append(this.img);
    }

    Slide.prototype.get_resize_dimensions = function(w, h) {
      var scale, window_height, window_width;
      window_height = $(window).height;
      window_width = $(window).width;
      if (window_width > w || window_height > h) {
        scale = window_width / w < window_height / h ? window_width / w : window_height / h;
        return {
          w: Math.floor(w * scale),
          h: Math.floor(h * scale)
        };
      } else {
        return {
          w: w,
          h: h
        };
      }
    };

    Slide.prototype.image_loaded = function() {
      var height, new_wh, width;
      this.loaded = true;
      width = this.img.width;
      height = this.img.height;
      new_wh = this.get_resize_dimensions(width, height);
      this.img.width = new_wh.w;
      this.img.height = new_wh.h;
      if (this.pending_show) {
        return this.show_slide();
      }
    };

    Slide.prototype.show_slide = function() {
      if (!this.loaded) {
        this.pending_show = true;
        return;
      }
      this.element.fadeIn("fast");
      return this.pending_show = false;
    };

    Slide.prototype.hide_slide = function() {
      return this.element.fadeOut("fast");
    };

    return Slide;

  })();

}).call(this);
